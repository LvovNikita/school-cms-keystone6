# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type School {
  id: ID!
  schoolName: String
  schoolNameAbbr: String
  director: Teacher
  address: String
  website: String
  email: String
  phone: String
  fax: String
  schedule: String
  OGRN: Int
  INN: Int
  INNStartDate: DateTime
  KPP: Int
  OKOPF: String
  OKFS: String
  licenseRegNumber: Int
  licenseSerialNumber: String
  licenseStartDate: DateTime
  isLicensePermanent: Boolean
  licenseEndDate: DateTime
  accreditationRegNumber: String
  accreditationSerialNumber: String
  accreditationStartDate: DateTime
  accreditationEndDate: DateTime
  founder: String
  founderAddress: String
  founderWebSite: String
  founderEmail: String
  founderPhone: String
  hasPreSchoolEducationLevel: Boolean
  numOfPreSchoolLevelPupils: Int
  hasPrimarySchoolEducationLevel: Boolean
  numOfPrimarySchooLevelPupils: Int
  gradeOneVacantPlaces: Int
  numOfFirstGrades: Int
  numOfSecondGrades: Int
  numOfThirdGrades: Int
  numOfFourthGrades: Int
  hasBasicGeneralSchoolEducationLevel: Boolean
  numOfBasicGeneralSchoolLevelPupils: Int
  gradeFiveVacantPlaces: Int
  numOfFifthrades: Int
  numOfSixthGrades: Int
  numOfSeventhGrades: Int
  numOfEighthGrades: Int
  numOfNenethGrades: Int
  hasSecondarySchoolEducationLevel: Boolean
  numOfSecondarySchoolLevelPupils: Int
  numOfTenthGrades: Int
  numOfEleventhGrades: Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SchoolWhereUniqueInput {
  id: ID
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IDFilter
  schoolName: StringFilter
  schoolNameAbbr: StringFilter
  director: TeacherWhereInput
  address: StringFilter
  website: StringFilter
  email: StringFilter
  phone: StringFilter
  fax: StringFilter
  schedule: StringFilter
  OGRN: IntNullableFilter
  INN: IntNullableFilter
  INNStartDate: DateTimeNullableFilter
  KPP: IntNullableFilter
  OKOPF: StringFilter
  OKFS: StringFilter
  licenseRegNumber: IntNullableFilter
  licenseSerialNumber: StringFilter
  licenseStartDate: DateTimeNullableFilter
  isLicensePermanent: BooleanFilter
  licenseEndDate: DateTimeNullableFilter
  accreditationRegNumber: StringFilter
  accreditationSerialNumber: StringFilter
  accreditationStartDate: DateTimeNullableFilter
  accreditationEndDate: DateTimeNullableFilter
  founder: StringFilter
  founderAddress: StringFilter
  founderWebSite: StringFilter
  founderEmail: StringFilter
  founderPhone: StringFilter
  hasPreSchoolEducationLevel: BooleanFilter
  numOfPreSchoolLevelPupils: IntNullableFilter
  hasPrimarySchoolEducationLevel: BooleanFilter
  numOfPrimarySchooLevelPupils: IntNullableFilter
  gradeOneVacantPlaces: IntNullableFilter
  numOfFirstGrades: IntNullableFilter
  numOfSecondGrades: IntNullableFilter
  numOfThirdGrades: IntNullableFilter
  numOfFourthGrades: IntNullableFilter
  hasBasicGeneralSchoolEducationLevel: BooleanFilter
  numOfBasicGeneralSchoolLevelPupils: IntNullableFilter
  gradeFiveVacantPlaces: IntNullableFilter
  numOfFifthrades: IntNullableFilter
  numOfSixthGrades: IntNullableFilter
  numOfSeventhGrades: IntNullableFilter
  numOfEighthGrades: IntNullableFilter
  numOfNenethGrades: IntNullableFilter
  hasSecondarySchoolEducationLevel: BooleanFilter
  numOfSecondarySchoolLevelPupils: IntNullableFilter
  numOfTenthGrades: IntNullableFilter
  numOfEleventhGrades: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SchoolOrderByInput {
  id: OrderDirection
  schoolName: OrderDirection
  schoolNameAbbr: OrderDirection
  address: OrderDirection
  website: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  schedule: OrderDirection
  OGRN: OrderDirection
  INN: OrderDirection
  INNStartDate: OrderDirection
  KPP: OrderDirection
  OKOPF: OrderDirection
  OKFS: OrderDirection
  licenseRegNumber: OrderDirection
  licenseSerialNumber: OrderDirection
  licenseStartDate: OrderDirection
  isLicensePermanent: OrderDirection
  licenseEndDate: OrderDirection
  accreditationRegNumber: OrderDirection
  accreditationSerialNumber: OrderDirection
  accreditationStartDate: OrderDirection
  accreditationEndDate: OrderDirection
  founder: OrderDirection
  founderAddress: OrderDirection
  founderWebSite: OrderDirection
  founderEmail: OrderDirection
  founderPhone: OrderDirection
  hasPreSchoolEducationLevel: OrderDirection
  numOfPreSchoolLevelPupils: OrderDirection
  hasPrimarySchoolEducationLevel: OrderDirection
  numOfPrimarySchooLevelPupils: OrderDirection
  gradeOneVacantPlaces: OrderDirection
  numOfFirstGrades: OrderDirection
  numOfSecondGrades: OrderDirection
  numOfThirdGrades: OrderDirection
  numOfFourthGrades: OrderDirection
  hasBasicGeneralSchoolEducationLevel: OrderDirection
  numOfBasicGeneralSchoolLevelPupils: OrderDirection
  gradeFiveVacantPlaces: OrderDirection
  numOfFifthrades: OrderDirection
  numOfSixthGrades: OrderDirection
  numOfSeventhGrades: OrderDirection
  numOfEighthGrades: OrderDirection
  numOfNenethGrades: OrderDirection
  hasSecondarySchoolEducationLevel: OrderDirection
  numOfSecondarySchoolLevelPupils: OrderDirection
  numOfTenthGrades: OrderDirection
  numOfEleventhGrades: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SchoolUpdateInput {
  schoolName: String
  schoolNameAbbr: String
  director: TeacherRelateToOneForUpdateInput
  address: String
  website: String
  email: String
  phone: String
  fax: String
  schedule: String
  OGRN: Int
  INN: Int
  INNStartDate: DateTime
  KPP: Int
  OKOPF: String
  OKFS: String
  licenseRegNumber: Int
  licenseSerialNumber: String
  licenseStartDate: DateTime
  isLicensePermanent: Boolean
  licenseEndDate: DateTime
  accreditationRegNumber: String
  accreditationSerialNumber: String
  accreditationStartDate: DateTime
  accreditationEndDate: DateTime
  founder: String
  founderAddress: String
  founderWebSite: String
  founderEmail: String
  founderPhone: String
  hasPreSchoolEducationLevel: Boolean
  numOfPreSchoolLevelPupils: Int
  hasPrimarySchoolEducationLevel: Boolean
  numOfPrimarySchooLevelPupils: Int
  gradeOneVacantPlaces: Int
  numOfFirstGrades: Int
  numOfSecondGrades: Int
  numOfThirdGrades: Int
  numOfFourthGrades: Int
  hasBasicGeneralSchoolEducationLevel: Boolean
  numOfBasicGeneralSchoolLevelPupils: Int
  gradeFiveVacantPlaces: Int
  numOfFifthrades: Int
  numOfSixthGrades: Int
  numOfSeventhGrades: Int
  numOfEighthGrades: Int
  numOfNenethGrades: Int
  hasSecondarySchoolEducationLevel: Boolean
  numOfSecondarySchoolLevelPupils: Int
  numOfTenthGrades: Int
  numOfEleventhGrades: Int
}

input TeacherRelateToOneForUpdateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
  disconnect: Boolean
}

input SchoolUpdateArgs {
  where: SchoolWhereUniqueInput!
  data: SchoolUpdateInput!
}

input SchoolCreateInput {
  schoolName: String
  schoolNameAbbr: String
  director: TeacherRelateToOneForCreateInput
  address: String
  website: String
  email: String
  phone: String
  fax: String
  schedule: String
  OGRN: Int
  INN: Int
  INNStartDate: DateTime
  KPP: Int
  OKOPF: String
  OKFS: String
  licenseRegNumber: Int
  licenseSerialNumber: String
  licenseStartDate: DateTime
  isLicensePermanent: Boolean
  licenseEndDate: DateTime
  accreditationRegNumber: String
  accreditationSerialNumber: String
  accreditationStartDate: DateTime
  accreditationEndDate: DateTime
  founder: String
  founderAddress: String
  founderWebSite: String
  founderEmail: String
  founderPhone: String
  hasPreSchoolEducationLevel: Boolean
  numOfPreSchoolLevelPupils: Int
  hasPrimarySchoolEducationLevel: Boolean
  numOfPrimarySchooLevelPupils: Int
  gradeOneVacantPlaces: Int
  numOfFirstGrades: Int
  numOfSecondGrades: Int
  numOfThirdGrades: Int
  numOfFourthGrades: Int
  hasBasicGeneralSchoolEducationLevel: Boolean
  numOfBasicGeneralSchoolLevelPupils: Int
  gradeFiveVacantPlaces: Int
  numOfFifthrades: Int
  numOfSixthGrades: Int
  numOfSeventhGrades: Int
  numOfEighthGrades: Int
  numOfNenethGrades: Int
  hasSecondarySchoolEducationLevel: Boolean
  numOfSecondarySchoolLevelPupils: Int
  numOfTenthGrades: Int
  numOfEleventhGrades: Int
}

input TeacherRelateToOneForCreateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
}

type User {
  id: ID!
  username: String
  password: PasswordState
  email: String
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

input UserUpdateInput {
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

type Teacher {
  id: ID!
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: TeacherPositionType
  subjects: String
  email: String
  phone: String
  category: TeacherCategoryType
  education: String
  educationLevel: TeacherEducationLevelType
  degree: TeacherDegreeType
  academicTitle: TeacherAcademicTitleType
  totalYearsExperience: Int
  teachingExperienceYears: Int
  worksSinceDate: DateTime
  trainings: String
  additionalInfo: String
}

enum TeacherPositionType {
  TEACHER
  DEPUTEE_DIRECTOR
  DIRECTOR
}

enum TeacherCategoryType {
  HIGHEST
  FIRST
  NONE
}

enum TeacherEducationLevelType {
  HIED
  PED
  VOCED
}

enum TeacherDegreeType {
  CANDIDATE
  DOCTOR
}

enum TeacherAcademicTitleType {
  ASSISTANT
  LECTURER
  SENIOR_LECTURER
  ASSOCIATE
  PROFESSOR
}

input TeacherWhereUniqueInput {
  id: ID
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  id: IDFilter
  firstname: StringFilter
  lastname: StringFilter
  middlename: StringFilter
  dateOfBirth: DateTimeNullableFilter
  position: TeacherPositionTypeNullableFilter
  subjects: StringFilter
  email: StringFilter
  phone: StringFilter
  category: TeacherCategoryTypeNullableFilter
  education: StringFilter
  educationLevel: TeacherEducationLevelTypeNullableFilter
  degree: TeacherDegreeTypeNullableFilter
  academicTitle: TeacherAcademicTitleTypeNullableFilter
  totalYearsExperience: IntNullableFilter
  teachingExperienceYears: IntNullableFilter
  worksSinceDate: DateTimeNullableFilter
  trainings: StringFilter
  additionalInfo: StringFilter
}

input TeacherPositionTypeNullableFilter {
  equals: TeacherPositionType
  in: [TeacherPositionType!]
  notIn: [TeacherPositionType!]
  not: TeacherPositionTypeNullableFilter
}

input TeacherCategoryTypeNullableFilter {
  equals: TeacherCategoryType
  in: [TeacherCategoryType!]
  notIn: [TeacherCategoryType!]
  not: TeacherCategoryTypeNullableFilter
}

input TeacherEducationLevelTypeNullableFilter {
  equals: TeacherEducationLevelType
  in: [TeacherEducationLevelType!]
  notIn: [TeacherEducationLevelType!]
  not: TeacherEducationLevelTypeNullableFilter
}

input TeacherDegreeTypeNullableFilter {
  equals: TeacherDegreeType
  in: [TeacherDegreeType!]
  notIn: [TeacherDegreeType!]
  not: TeacherDegreeTypeNullableFilter
}

input TeacherAcademicTitleTypeNullableFilter {
  equals: TeacherAcademicTitleType
  in: [TeacherAcademicTitleType!]
  notIn: [TeacherAcademicTitleType!]
  not: TeacherAcademicTitleTypeNullableFilter
}

input TeacherOrderByInput {
  id: OrderDirection
  firstname: OrderDirection
  lastname: OrderDirection
  middlename: OrderDirection
  dateOfBirth: OrderDirection
  position: OrderDirection
  subjects: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  category: OrderDirection
  education: OrderDirection
  educationLevel: OrderDirection
  degree: OrderDirection
  academicTitle: OrderDirection
  totalYearsExperience: OrderDirection
  teachingExperienceYears: OrderDirection
  worksSinceDate: OrderDirection
  trainings: OrderDirection
  additionalInfo: OrderDirection
}

input TeacherUpdateInput {
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: TeacherPositionType
  subjects: String
  email: String
  phone: String
  category: TeacherCategoryType
  education: String
  educationLevel: TeacherEducationLevelType
  degree: TeacherDegreeType
  academicTitle: TeacherAcademicTitleType
  totalYearsExperience: Int
  teachingExperienceYears: Int
  worksSinceDate: DateTime
  trainings: String
  additionalInfo: String
}

input TeacherUpdateArgs {
  where: TeacherWhereUniqueInput!
  data: TeacherUpdateInput!
}

input TeacherCreateInput {
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: TeacherPositionType
  subjects: String
  email: String
  phone: String
  category: TeacherCategoryType
  education: String
  educationLevel: TeacherEducationLevelType
  degree: TeacherDegreeType
  academicTitle: TeacherAcademicTitleType
  totalYearsExperience: Int
  teachingExperienceYears: Int
  worksSinceDate: DateTime
  trainings: String
  additionalInfo: String
}

type MenuItem {
  id: ID!
  title: String
  weigth: Int
  subItems(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  subItemsCount(where: MenuItemWhereInput! = {}): Int
  slug: String
  pageRef: Page
  isTopLevel: Boolean
}

input MenuItemWhereUniqueInput {
  id: ID
  slug: String
}

input MenuItemWhereInput {
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
  id: IDFilter
  title: StringFilter
  weigth: IntNullableFilter
  subItems: MenuItemManyRelationFilter
  slug: StringFilter
  pageRef: PageWhereInput
  isTopLevel: BooleanFilter
}

input MenuItemManyRelationFilter {
  every: MenuItemWhereInput
  some: MenuItemWhereInput
  none: MenuItemWhereInput
}

input MenuItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  weigth: OrderDirection
  slug: OrderDirection
  isTopLevel: OrderDirection
}

input MenuItemUpdateInput {
  title: String
  weigth: Int
  subItems: MenuItemRelateToManyForUpdateInput
  slug: String
  pageRef: PageRelateToOneForUpdateInput
  isTopLevel: Boolean
}

input MenuItemRelateToManyForUpdateInput {
  disconnect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input MenuItemUpdateArgs {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateInput!
}

input MenuItemCreateInput {
  title: String
  weigth: Int
  subItems: MenuItemRelateToManyForCreateInput
  slug: String
  pageRef: PageRelateToOneForCreateInput
  isTopLevel: Boolean
}

input MenuItemRelateToManyForCreateInput {
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

type Page {
  id: ID!
  title: String
  menuItemRef: MenuItem
  blocks(
    where: BlockWhereInput! = {}
    orderBy: [BlockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Block!]
  blocksCount(where: BlockWhereInput! = {}): Int
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  menuItemRef: MenuItemWhereInput
  blocks: BlockManyRelationFilter
}

input BlockManyRelationFilter {
  every: BlockWhereInput
  some: BlockWhereInput
  none: BlockWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PageUpdateInput {
  title: String
  menuItemRef: MenuItemRelateToOneForUpdateInput
  blocks: BlockRelateToManyForUpdateInput
}

input MenuItemRelateToOneForUpdateInput {
  create: MenuItemCreateInput
  connect: MenuItemWhereUniqueInput
  disconnect: Boolean
}

input BlockRelateToManyForUpdateInput {
  disconnect: [BlockWhereUniqueInput!]
  set: [BlockWhereUniqueInput!]
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  menuItemRef: MenuItemRelateToOneForCreateInput
  blocks: BlockRelateToManyForCreateInput
}

input MenuItemRelateToOneForCreateInput {
  create: MenuItemCreateInput
  connect: MenuItemWhereUniqueInput
}

input BlockRelateToManyForCreateInput {
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

type Block {
  id: ID!
  title: String
  content: Block_content_Document
}

type Block_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BlockWhereUniqueInput {
  id: ID
}

input BlockWhereInput {
  AND: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  NOT: [BlockWhereInput!]
  id: IDFilter
  title: StringFilter
}

input BlockOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input BlockUpdateInput {
  title: String
  content: JSON
}

input BlockUpdateArgs {
  where: BlockWhereUniqueInput!
  data: BlockUpdateInput!
}

input BlockCreateInput {
  title: String
  content: JSON
}

type NewsPost {
  id: ID!
  title: String
  content: NewsPost_content_Document
  publicationDate: DateTime
}

type NewsPost_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NewsPostWhereUniqueInput {
  id: ID
}

input NewsPostWhereInput {
  AND: [NewsPostWhereInput!]
  OR: [NewsPostWhereInput!]
  NOT: [NewsPostWhereInput!]
  id: IDFilter
  title: StringFilter
  publicationDate: DateTimeNullableFilter
}

input NewsPostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publicationDate: OrderDirection
}

input NewsPostUpdateInput {
  title: String
  content: JSON
  publicationDate: DateTime
}

input NewsPostUpdateArgs {
  where: NewsPostWhereUniqueInput!
  data: NewsPostUpdateInput!
}

input NewsPostCreateInput {
  title: String
  content: JSON
  publicationDate: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createSchool(data: SchoolCreateInput!): School
  createSchools(data: [SchoolCreateInput!]!): [School]
  updateSchool(where: SchoolWhereUniqueInput!, data: SchoolUpdateInput!): School
  updateSchools(data: [SchoolUpdateArgs!]!): [School]
  deleteSchool(where: SchoolWhereUniqueInput!): School
  deleteSchools(where: [SchoolWhereUniqueInput!]!): [School]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTeacher(data: TeacherCreateInput!): Teacher
  createTeachers(data: [TeacherCreateInput!]!): [Teacher]
  updateTeacher(
    where: TeacherWhereUniqueInput!
    data: TeacherUpdateInput!
  ): Teacher
  updateTeachers(data: [TeacherUpdateArgs!]!): [Teacher]
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteTeachers(where: [TeacherWhereUniqueInput!]!): [Teacher]
  createMenuItem(data: MenuItemCreateInput!): MenuItem
  createMenuItems(data: [MenuItemCreateInput!]!): [MenuItem]
  updateMenuItem(
    where: MenuItemWhereUniqueInput!
    data: MenuItemUpdateInput!
  ): MenuItem
  updateMenuItems(data: [MenuItemUpdateArgs!]!): [MenuItem]
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteMenuItems(where: [MenuItemWhereUniqueInput!]!): [MenuItem]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createBlock(data: BlockCreateInput!): Block
  createBlocks(data: [BlockCreateInput!]!): [Block]
  updateBlock(where: BlockWhereUniqueInput!, data: BlockUpdateInput!): Block
  updateBlocks(data: [BlockUpdateArgs!]!): [Block]
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteBlocks(where: [BlockWhereUniqueInput!]!): [Block]
  createNewsPost(data: NewsPostCreateInput!): NewsPost
  createNewsPosts(data: [NewsPostCreateInput!]!): [NewsPost]
  updateNewsPost(
    where: NewsPostWhereUniqueInput!
    data: NewsPostUpdateInput!
  ): NewsPost
  updateNewsPosts(data: [NewsPostUpdateArgs!]!): [NewsPost]
  deleteNewsPost(where: NewsPostWhereUniqueInput!): NewsPost
  deleteNewsPosts(where: [NewsPostWhereUniqueInput!]!): [NewsPost]
}

type Query {
  schools(
    where: SchoolWhereInput! = {}
    orderBy: [SchoolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [School!]
  school(where: SchoolWhereUniqueInput!): School
  schoolsCount(where: SchoolWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  teachers(
    where: TeacherWhereInput! = {}
    orderBy: [TeacherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Teacher!]
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachersCount(where: TeacherWhereInput! = {}): Int
  menuItems(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItemsCount(where: MenuItemWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  blocks(
    where: BlockWhereInput! = {}
    orderBy: [BlockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Block!]
  block(where: BlockWhereUniqueInput!): Block
  blocksCount(where: BlockWhereInput! = {}): Int
  newsPosts(
    where: NewsPostWhereInput! = {}
    orderBy: [NewsPostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NewsPost!]
  newsPost(where: NewsPostWhereUniqueInput!): NewsPost
  newsPostsCount(where: NewsPostWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
