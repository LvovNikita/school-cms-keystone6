# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  password: PasswordState
  email: String
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  password: PasswordFilter
  email: StringFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

type Teacher {
  id: ID!
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: String
  subjects: JSON
  email: String
  phone: String
  category: String
  education: String
  educationLevel: String
  degree: String
  academicTitle: String
  totalYearsExperience: Int
  totalYearsExperienceUpdateDate: DateTime
  teachingExperienceYears: Int
  teachingExperienceYearsUpdateDate: DateTime
  worksSinceDate: DateTime
  trainings: JSON
  experience: String
  additionalInfo: String
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TeacherWhereUniqueInput {
  id: ID
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  id: IDFilter
  firstname: StringFilter
  lastname: StringFilter
  middlename: StringFilter
  dateOfBirth: DateTimeNullableFilter
  position: StringNullableFilter
  email: StringFilter
  phone: StringFilter
  category: StringNullableFilter
  education: StringFilter
  educationLevel: StringNullableFilter
  degree: StringNullableFilter
  academicTitle: StringNullableFilter
  totalYearsExperience: IntNullableFilter
  totalYearsExperienceUpdateDate: DateTimeNullableFilter
  teachingExperienceYears: IntNullableFilter
  teachingExperienceYearsUpdateDate: DateTimeNullableFilter
  worksSinceDate: DateTimeNullableFilter
  experience: StringFilter
  additionalInfo: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TeacherOrderByInput {
  id: OrderDirection
  firstname: OrderDirection
  lastname: OrderDirection
  middlename: OrderDirection
  dateOfBirth: OrderDirection
  position: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  category: OrderDirection
  education: OrderDirection
  educationLevel: OrderDirection
  degree: OrderDirection
  academicTitle: OrderDirection
  totalYearsExperience: OrderDirection
  totalYearsExperienceUpdateDate: OrderDirection
  teachingExperienceYears: OrderDirection
  teachingExperienceYearsUpdateDate: OrderDirection
  worksSinceDate: OrderDirection
  experience: OrderDirection
  additionalInfo: OrderDirection
}

input TeacherUpdateInput {
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: String
  subjects: JSON
  email: String
  phone: String
  category: String
  education: String
  educationLevel: String
  degree: String
  academicTitle: String
  totalYearsExperience: Int
  totalYearsExperienceUpdateDate: DateTime
  teachingExperienceYears: Int
  teachingExperienceYearsUpdateDate: DateTime
  worksSinceDate: DateTime
  trainings: JSON
  experience: String
  additionalInfo: String
}

input TeacherUpdateArgs {
  where: TeacherWhereUniqueInput!
  data: TeacherUpdateInput!
}

input TeacherCreateInput {
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: String
  subjects: JSON
  email: String
  phone: String
  category: String
  education: String
  educationLevel: String
  degree: String
  academicTitle: String
  totalYearsExperience: Int
  totalYearsExperienceUpdateDate: DateTime
  teachingExperienceYears: Int
  teachingExperienceYearsUpdateDate: DateTime
  worksSinceDate: DateTime
  trainings: JSON
  experience: String
  additionalInfo: String
}

type MenuItem {
  id: ID!
  title: String
  weigth: Int
  subItems(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  subItemsCount(where: MenuItemWhereInput! = {}): Int
  slug: String
  isTopLevel: Boolean
}

input MenuItemWhereUniqueInput {
  id: ID
}

input MenuItemWhereInput {
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
  id: IDFilter
  title: StringFilter
  weigth: IntNullableFilter
  subItems: MenuItemManyRelationFilter
  slug: StringFilter
  isTopLevel: BooleanFilter
}

input MenuItemManyRelationFilter {
  every: MenuItemWhereInput
  some: MenuItemWhereInput
  none: MenuItemWhereInput
}

input MenuItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  weigth: OrderDirection
  slug: OrderDirection
  isTopLevel: OrderDirection
}

input MenuItemUpdateInput {
  title: String
  weigth: Int
  subItems: MenuItemRelateToManyForUpdateInput
  slug: String
  isTopLevel: Boolean
}

input MenuItemRelateToManyForUpdateInput {
  disconnect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuItemUpdateArgs {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateInput!
}

input MenuItemCreateInput {
  title: String
  weigth: Int
  subItems: MenuItemRelateToManyForCreateInput
  slug: String
  isTopLevel: Boolean
}

input MenuItemRelateToManyForCreateInput {
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

type NewsPost {
  id: ID!
  title: String
  content: NewsPost_content_Document
  publicationDate: DateTime
}

type NewsPost_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NewsPostWhereUniqueInput {
  id: ID
}

input NewsPostWhereInput {
  AND: [NewsPostWhereInput!]
  OR: [NewsPostWhereInput!]
  NOT: [NewsPostWhereInput!]
  id: IDFilter
  title: StringFilter
  publicationDate: DateTimeNullableFilter
}

input NewsPostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publicationDate: OrderDirection
}

input NewsPostUpdateInput {
  title: String
  content: JSON
  publicationDate: DateTime
}

input NewsPostUpdateArgs {
  where: NewsPostWhereUniqueInput!
  data: NewsPostUpdateInput!
}

input NewsPostCreateInput {
  title: String
  content: JSON
  publicationDate: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTeacher(data: TeacherCreateInput!): Teacher
  createTeachers(data: [TeacherCreateInput!]!): [Teacher]
  updateTeacher(
    where: TeacherWhereUniqueInput!
    data: TeacherUpdateInput!
  ): Teacher
  updateTeachers(data: [TeacherUpdateArgs!]!): [Teacher]
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteTeachers(where: [TeacherWhereUniqueInput!]!): [Teacher]
  createMenuItem(data: MenuItemCreateInput!): MenuItem
  createMenuItems(data: [MenuItemCreateInput!]!): [MenuItem]
  updateMenuItem(
    where: MenuItemWhereUniqueInput!
    data: MenuItemUpdateInput!
  ): MenuItem
  updateMenuItems(data: [MenuItemUpdateArgs!]!): [MenuItem]
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteMenuItems(where: [MenuItemWhereUniqueInput!]!): [MenuItem]
  createNewsPost(data: NewsPostCreateInput!): NewsPost
  createNewsPosts(data: [NewsPostCreateInput!]!): [NewsPost]
  updateNewsPost(
    where: NewsPostWhereUniqueInput!
    data: NewsPostUpdateInput!
  ): NewsPost
  updateNewsPosts(data: [NewsPostUpdateArgs!]!): [NewsPost]
  deleteNewsPost(where: NewsPostWhereUniqueInput!): NewsPost
  deleteNewsPosts(where: [NewsPostWhereUniqueInput!]!): [NewsPost]
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  teachers(
    where: TeacherWhereInput! = {}
    orderBy: [TeacherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Teacher!]
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachersCount(where: TeacherWhereInput! = {}): Int
  menuItems(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItemsCount(where: MenuItemWhereInput! = {}): Int
  newsPosts(
    where: NewsPostWhereInput! = {}
    orderBy: [NewsPostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NewsPost!]
  newsPost(where: NewsPostWhereUniqueInput!): NewsPost
  newsPostsCount(where: NewsPostWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
