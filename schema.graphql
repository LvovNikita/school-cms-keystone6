# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type School {
  id: ID!
  schoolName: String
  schoolNameAbbr: String
  director: Teacher
  address: String
  website: String
  email: String
  phone: String
  fax: String
  schedule: String
  OGRN: String
  INN: String
  INNStartDate: DateTime
  KPP: String
  OKOPF: String
  OKFS: String
  licenseRegNumber: Int
  licenseSerialNumber: String
  licenseStartDate: DateTime
  isLicensePermanent: Boolean
  licenseEndDate: DateTime
  accreditationRegNumber: String
  accreditationSerialNumber: String
  accreditationStartDate: DateTime
  accreditationEndDate: DateTime
  founder: String
  founderAddress: String
  founderWebSite: String
  founderEmail: String
  founderPhone: String
  hasPreSchoolEducationLevel: Boolean
  numOfPreSchoolLevelPupils: Int
  hasPrimarySchoolEducationLevel: Boolean
  numOfPrimarySchooLevelPupils: Int
  gradeOneVacantPlaces: Int
  numOfFirstGrades: Int
  numOfSecondGrades: Int
  numOfThirdGrades: Int
  numOfFourthGrades: Int
  hasBasicGeneralSchoolEducationLevel: Boolean
  numOfBasicGeneralSchoolLevelPupils: Int
  gradeFiveVacantPlaces: Int
  numOfFifthrades: Int
  numOfSixthGrades: Int
  numOfSeventhGrades: Int
  numOfEighthGrades: Int
  numOfNinethGrades: Int
  hasSecondarySchoolEducationLevel: Boolean
  numOfSecondarySchoolLevelPupils: Int
  numOfTenthGrades: Int
  numOfEleventhGrades: Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SchoolWhereUniqueInput {
  id: ID
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IDFilter
  schoolName: StringFilter
  schoolNameAbbr: StringFilter
  director: TeacherWhereInput
  address: StringFilter
  website: StringFilter
  email: StringFilter
  phone: StringFilter
  fax: StringFilter
  schedule: StringFilter
  OGRN: StringFilter
  INN: StringFilter
  INNStartDate: DateTimeNullableFilter
  KPP: StringFilter
  OKOPF: StringFilter
  OKFS: StringFilter
  licenseRegNumber: IntNullableFilter
  licenseSerialNumber: StringFilter
  licenseStartDate: DateTimeNullableFilter
  isLicensePermanent: BooleanFilter
  licenseEndDate: DateTimeNullableFilter
  accreditationRegNumber: StringFilter
  accreditationSerialNumber: StringFilter
  accreditationStartDate: DateTimeNullableFilter
  accreditationEndDate: DateTimeNullableFilter
  founder: StringFilter
  founderAddress: StringFilter
  founderWebSite: StringFilter
  founderEmail: StringFilter
  founderPhone: StringFilter
  hasPreSchoolEducationLevel: BooleanFilter
  numOfPreSchoolLevelPupils: IntNullableFilter
  hasPrimarySchoolEducationLevel: BooleanFilter
  numOfPrimarySchooLevelPupils: IntNullableFilter
  gradeOneVacantPlaces: IntNullableFilter
  numOfFirstGrades: IntNullableFilter
  numOfSecondGrades: IntNullableFilter
  numOfThirdGrades: IntNullableFilter
  numOfFourthGrades: IntNullableFilter
  hasBasicGeneralSchoolEducationLevel: BooleanFilter
  numOfBasicGeneralSchoolLevelPupils: IntNullableFilter
  gradeFiveVacantPlaces: IntNullableFilter
  numOfFifthrades: IntNullableFilter
  numOfSixthGrades: IntNullableFilter
  numOfSeventhGrades: IntNullableFilter
  numOfEighthGrades: IntNullableFilter
  numOfNinethGrades: IntNullableFilter
  hasSecondarySchoolEducationLevel: BooleanFilter
  numOfSecondarySchoolLevelPupils: IntNullableFilter
  numOfTenthGrades: IntNullableFilter
  numOfEleventhGrades: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SchoolOrderByInput {
  id: OrderDirection
  schoolName: OrderDirection
  schoolNameAbbr: OrderDirection
  address: OrderDirection
  website: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  schedule: OrderDirection
  OGRN: OrderDirection
  INN: OrderDirection
  INNStartDate: OrderDirection
  KPP: OrderDirection
  OKOPF: OrderDirection
  OKFS: OrderDirection
  licenseRegNumber: OrderDirection
  licenseSerialNumber: OrderDirection
  licenseStartDate: OrderDirection
  isLicensePermanent: OrderDirection
  licenseEndDate: OrderDirection
  accreditationRegNumber: OrderDirection
  accreditationSerialNumber: OrderDirection
  accreditationStartDate: OrderDirection
  accreditationEndDate: OrderDirection
  founder: OrderDirection
  founderAddress: OrderDirection
  founderWebSite: OrderDirection
  founderEmail: OrderDirection
  founderPhone: OrderDirection
  hasPreSchoolEducationLevel: OrderDirection
  numOfPreSchoolLevelPupils: OrderDirection
  hasPrimarySchoolEducationLevel: OrderDirection
  numOfPrimarySchooLevelPupils: OrderDirection
  gradeOneVacantPlaces: OrderDirection
  numOfFirstGrades: OrderDirection
  numOfSecondGrades: OrderDirection
  numOfThirdGrades: OrderDirection
  numOfFourthGrades: OrderDirection
  hasBasicGeneralSchoolEducationLevel: OrderDirection
  numOfBasicGeneralSchoolLevelPupils: OrderDirection
  gradeFiveVacantPlaces: OrderDirection
  numOfFifthrades: OrderDirection
  numOfSixthGrades: OrderDirection
  numOfSeventhGrades: OrderDirection
  numOfEighthGrades: OrderDirection
  numOfNinethGrades: OrderDirection
  hasSecondarySchoolEducationLevel: OrderDirection
  numOfSecondarySchoolLevelPupils: OrderDirection
  numOfTenthGrades: OrderDirection
  numOfEleventhGrades: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SchoolUpdateInput {
  schoolName: String
  schoolNameAbbr: String
  director: TeacherRelateToOneForUpdateInput
  address: String
  website: String
  email: String
  phone: String
  fax: String
  schedule: String
  OGRN: String
  INN: String
  INNStartDate: DateTime
  KPP: String
  OKOPF: String
  OKFS: String
  licenseRegNumber: Int
  licenseSerialNumber: String
  licenseStartDate: DateTime
  isLicensePermanent: Boolean
  licenseEndDate: DateTime
  accreditationRegNumber: String
  accreditationSerialNumber: String
  accreditationStartDate: DateTime
  accreditationEndDate: DateTime
  founder: String
  founderAddress: String
  founderWebSite: String
  founderEmail: String
  founderPhone: String
  hasPreSchoolEducationLevel: Boolean
  numOfPreSchoolLevelPupils: Int
  hasPrimarySchoolEducationLevel: Boolean
  numOfPrimarySchooLevelPupils: Int
  gradeOneVacantPlaces: Int
  numOfFirstGrades: Int
  numOfSecondGrades: Int
  numOfThirdGrades: Int
  numOfFourthGrades: Int
  hasBasicGeneralSchoolEducationLevel: Boolean
  numOfBasicGeneralSchoolLevelPupils: Int
  gradeFiveVacantPlaces: Int
  numOfFifthrades: Int
  numOfSixthGrades: Int
  numOfSeventhGrades: Int
  numOfEighthGrades: Int
  numOfNinethGrades: Int
  hasSecondarySchoolEducationLevel: Boolean
  numOfSecondarySchoolLevelPupils: Int
  numOfTenthGrades: Int
  numOfEleventhGrades: Int
}

input TeacherRelateToOneForUpdateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
  disconnect: Boolean
}

input SchoolUpdateArgs {
  where: SchoolWhereUniqueInput!
  data: SchoolUpdateInput!
}

input SchoolCreateInput {
  schoolName: String
  schoolNameAbbr: String
  director: TeacherRelateToOneForCreateInput
  address: String
  website: String
  email: String
  phone: String
  fax: String
  schedule: String
  OGRN: String
  INN: String
  INNStartDate: DateTime
  KPP: String
  OKOPF: String
  OKFS: String
  licenseRegNumber: Int
  licenseSerialNumber: String
  licenseStartDate: DateTime
  isLicensePermanent: Boolean
  licenseEndDate: DateTime
  accreditationRegNumber: String
  accreditationSerialNumber: String
  accreditationStartDate: DateTime
  accreditationEndDate: DateTime
  founder: String
  founderAddress: String
  founderWebSite: String
  founderEmail: String
  founderPhone: String
  hasPreSchoolEducationLevel: Boolean
  numOfPreSchoolLevelPupils: Int
  hasPrimarySchoolEducationLevel: Boolean
  numOfPrimarySchooLevelPupils: Int
  gradeOneVacantPlaces: Int
  numOfFirstGrades: Int
  numOfSecondGrades: Int
  numOfThirdGrades: Int
  numOfFourthGrades: Int
  hasBasicGeneralSchoolEducationLevel: Boolean
  numOfBasicGeneralSchoolLevelPupils: Int
  gradeFiveVacantPlaces: Int
  numOfFifthrades: Int
  numOfSixthGrades: Int
  numOfSeventhGrades: Int
  numOfEighthGrades: Int
  numOfNinethGrades: Int
  hasSecondarySchoolEducationLevel: Boolean
  numOfSecondarySchoolLevelPupils: Int
  numOfTenthGrades: Int
  numOfEleventhGrades: Int
}

input TeacherRelateToOneForCreateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
}

type User {
  id: ID!
  username: String
  password: PasswordState
  email: String
  teacherRef: Teacher
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  teacherRef: TeacherWhereInput
  isAdmin: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

input UserUpdateInput {
  username: String
  password: String
  email: String
  teacherRef: TeacherRelateToOneForUpdateInput
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  password: String
  email: String
  teacherRef: TeacherRelateToOneForCreateInput
  isAdmin: Boolean
}

type Teacher {
  id: ID!
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: TeacherPositionType
  subjects: String
  email: String
  phone: String
  category: TeacherCategoryType
  education: String
  educationLevel: TeacherEducationLevelType
  degree: TeacherDegreeType
  academicTitle: TeacherAcademicTitleType
  totalYearsExperience: Int
  teachingExperienceYears: Int
  worksSinceDate: DateTime
  trainings: String
  additionalInfo: String
  experience: String
  updateDate: DateTime
}

enum TeacherPositionType {
  TEACHER
  DEPUTEE_DIRECTOR
  DIRECTOR
}

enum TeacherCategoryType {
  HIGHEST
  FIRST
  NONE
}

enum TeacherEducationLevelType {
  HIED
  PED
  VOCED
}

enum TeacherDegreeType {
  CANDIDATE
  DOCTOR
}

enum TeacherAcademicTitleType {
  ASSISTANT
  LECTURER
  SENIOR_LECTURER
  ASSOCIATE
  PROFESSOR
}

input TeacherWhereUniqueInput {
  id: ID
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  id: IDFilter
  firstname: StringFilter
  lastname: StringFilter
  middlename: StringFilter
  dateOfBirth: DateTimeNullableFilter
  position: TeacherPositionTypeNullableFilter
  subjects: StringFilter
  email: StringFilter
  phone: StringFilter
  category: TeacherCategoryTypeNullableFilter
  education: StringFilter
  educationLevel: TeacherEducationLevelTypeNullableFilter
  degree: TeacherDegreeTypeNullableFilter
  academicTitle: TeacherAcademicTitleTypeNullableFilter
  totalYearsExperience: IntNullableFilter
  teachingExperienceYears: IntNullableFilter
  worksSinceDate: DateTimeNullableFilter
  trainings: StringFilter
  additionalInfo: StringFilter
  experience: StringFilter
  updateDate: DateTimeNullableFilter
}

input TeacherPositionTypeNullableFilter {
  equals: TeacherPositionType
  in: [TeacherPositionType!]
  notIn: [TeacherPositionType!]
  not: TeacherPositionTypeNullableFilter
}

input TeacherCategoryTypeNullableFilter {
  equals: TeacherCategoryType
  in: [TeacherCategoryType!]
  notIn: [TeacherCategoryType!]
  not: TeacherCategoryTypeNullableFilter
}

input TeacherEducationLevelTypeNullableFilter {
  equals: TeacherEducationLevelType
  in: [TeacherEducationLevelType!]
  notIn: [TeacherEducationLevelType!]
  not: TeacherEducationLevelTypeNullableFilter
}

input TeacherDegreeTypeNullableFilter {
  equals: TeacherDegreeType
  in: [TeacherDegreeType!]
  notIn: [TeacherDegreeType!]
  not: TeacherDegreeTypeNullableFilter
}

input TeacherAcademicTitleTypeNullableFilter {
  equals: TeacherAcademicTitleType
  in: [TeacherAcademicTitleType!]
  notIn: [TeacherAcademicTitleType!]
  not: TeacherAcademicTitleTypeNullableFilter
}

input TeacherOrderByInput {
  id: OrderDirection
  firstname: OrderDirection
  lastname: OrderDirection
  middlename: OrderDirection
  dateOfBirth: OrderDirection
  position: OrderDirection
  subjects: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  category: OrderDirection
  education: OrderDirection
  educationLevel: OrderDirection
  degree: OrderDirection
  academicTitle: OrderDirection
  totalYearsExperience: OrderDirection
  teachingExperienceYears: OrderDirection
  worksSinceDate: OrderDirection
  trainings: OrderDirection
  additionalInfo: OrderDirection
  experience: OrderDirection
  updateDate: OrderDirection
}

input TeacherUpdateInput {
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: TeacherPositionType
  subjects: String
  email: String
  phone: String
  category: TeacherCategoryType
  education: String
  educationLevel: TeacherEducationLevelType
  degree: TeacherDegreeType
  academicTitle: TeacherAcademicTitleType
  totalYearsExperience: Int
  teachingExperienceYears: Int
  worksSinceDate: DateTime
  trainings: String
  additionalInfo: String
  experience: String
  updateDate: DateTime
}

input TeacherUpdateArgs {
  where: TeacherWhereUniqueInput!
  data: TeacherUpdateInput!
}

input TeacherCreateInput {
  firstname: String
  lastname: String
  middlename: String
  dateOfBirth: DateTime
  position: TeacherPositionType
  subjects: String
  email: String
  phone: String
  category: TeacherCategoryType
  education: String
  educationLevel: TeacherEducationLevelType
  degree: TeacherDegreeType
  academicTitle: TeacherAcademicTitleType
  totalYearsExperience: Int
  teachingExperienceYears: Int
  worksSinceDate: DateTime
  trainings: String
  additionalInfo: String
  experience: String
  updateDate: DateTime
}

type MainMenuItem {
  id: ID!
  title: String
  weight: Int
  subItemsRef(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  subItemsRefCount(where: MenuItemWhereInput! = {}): Int
}

input MainMenuItemWhereUniqueInput {
  id: ID
}

input MainMenuItemWhereInput {
  AND: [MainMenuItemWhereInput!]
  OR: [MainMenuItemWhereInput!]
  NOT: [MainMenuItemWhereInput!]
  id: IDFilter
  title: StringFilter
  weight: IntNullableFilter
  subItemsRef: MenuItemManyRelationFilter
}

input MenuItemManyRelationFilter {
  every: MenuItemWhereInput
  some: MenuItemWhereInput
  none: MenuItemWhereInput
}

input MainMenuItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  weight: OrderDirection
}

input MainMenuItemUpdateInput {
  title: String
  weight: Int
  subItemsRef: MenuItemRelateToManyForUpdateInput
}

input MenuItemRelateToManyForUpdateInput {
  disconnect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MainMenuItemUpdateArgs {
  where: MainMenuItemWhereUniqueInput!
  data: MainMenuItemUpdateInput!
}

input MainMenuItemCreateInput {
  title: String
  weight: Int
  subItemsRef: MenuItemRelateToManyForCreateInput
}

input MenuItemRelateToManyForCreateInput {
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

type MenuItem {
  id: ID!
  title: String
  weight: Int
  slug: String
  mainMenuRef: MainMenuItem
  pageRef: Page
}

input MenuItemWhereUniqueInput {
  id: ID
  slug: String
}

input MenuItemWhereInput {
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
  id: IDFilter
  title: StringFilter
  weight: IntNullableFilter
  slug: StringFilter
  mainMenuRef: MainMenuItemWhereInput
  pageRef: PageWhereInput
}

input MenuItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  weight: OrderDirection
  slug: OrderDirection
}

input MenuItemUpdateInput {
  title: String
  weight: Int
  slug: String
  mainMenuRef: MainMenuItemRelateToOneForUpdateInput
  pageRef: PageRelateToOneForUpdateInput
}

input MainMenuItemRelateToOneForUpdateInput {
  create: MainMenuItemCreateInput
  connect: MainMenuItemWhereUniqueInput
  disconnect: Boolean
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input MenuItemUpdateArgs {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateInput!
}

input MenuItemCreateInput {
  title: String
  weight: Int
  slug: String
  mainMenuRef: MainMenuItemRelateToOneForCreateInput
  pageRef: PageRelateToOneForCreateInput
}

input MainMenuItemRelateToOneForCreateInput {
  create: MainMenuItemCreateInput
  connect: MainMenuItemWhereUniqueInput
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

type Page {
  id: ID!
  title: String
  menuItemRef: MenuItem
  blocks(
    where: BlockWhereInput! = {}
    orderBy: [BlockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Block!]
  blocksCount(where: BlockWhereInput! = {}): Int
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  menuItemRef: MenuItemWhereInput
  blocks: BlockManyRelationFilter
}

input BlockManyRelationFilter {
  every: BlockWhereInput
  some: BlockWhereInput
  none: BlockWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PageUpdateInput {
  title: String
  menuItemRef: MenuItemRelateToOneForUpdateInput
  blocks: BlockRelateToManyForUpdateInput
}

input MenuItemRelateToOneForUpdateInput {
  create: MenuItemCreateInput
  connect: MenuItemWhereUniqueInput
  disconnect: Boolean
}

input BlockRelateToManyForUpdateInput {
  disconnect: [BlockWhereUniqueInput!]
  set: [BlockWhereUniqueInput!]
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  menuItemRef: MenuItemRelateToOneForCreateInput
  blocks: BlockRelateToManyForCreateInput
}

input MenuItemRelateToOneForCreateInput {
  create: MenuItemCreateInput
  connect: MenuItemWhereUniqueInput
}

input BlockRelateToManyForCreateInput {
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

type Block {
  id: ID!
  title: String
  content: Block_content_Document
}

type Block_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BlockWhereUniqueInput {
  id: ID
}

input BlockWhereInput {
  AND: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  NOT: [BlockWhereInput!]
  id: IDFilter
  title: StringFilter
}

input BlockOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input BlockUpdateInput {
  title: String
  content: JSON
}

input BlockUpdateArgs {
  where: BlockWhereUniqueInput!
  data: BlockUpdateInput!
}

input BlockCreateInput {
  title: String
  content: JSON
}

type NewsPost {
  id: ID!
  title: String
  content: NewsPost_content_Document
  publicationDate: DateTime
}

type NewsPost_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NewsPostWhereUniqueInput {
  id: ID
}

input NewsPostWhereInput {
  AND: [NewsPostWhereInput!]
  OR: [NewsPostWhereInput!]
  NOT: [NewsPostWhereInput!]
  id: IDFilter
  title: StringFilter
  publicationDate: DateTimeNullableFilter
}

input NewsPostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publicationDate: OrderDirection
}

input NewsPostUpdateInput {
  title: String
  content: JSON
  publicationDate: DateTime
}

input NewsPostUpdateArgs {
  where: NewsPostWhereUniqueInput!
  data: NewsPostUpdateInput!
}

input NewsPostCreateInput {
  title: String
  content: JSON
  publicationDate: DateTime
}

type Subject {
  id: ID!
  title: String
  teacherRef(
    where: TeacherWhereInput! = {}
    orderBy: [TeacherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Teacher!]
  teacherRefCount(where: TeacherWhereInput! = {}): Int
}

input SubjectWhereUniqueInput {
  id: ID
}

input SubjectWhereInput {
  AND: [SubjectWhereInput!]
  OR: [SubjectWhereInput!]
  NOT: [SubjectWhereInput!]
  id: IDFilter
  title: StringFilter
  teacherRef: TeacherManyRelationFilter
}

input TeacherManyRelationFilter {
  every: TeacherWhereInput
  some: TeacherWhereInput
  none: TeacherWhereInput
}

input SubjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input SubjectUpdateInput {
  title: String
  teacherRef: TeacherRelateToManyForUpdateInput
}

input TeacherRelateToManyForUpdateInput {
  disconnect: [TeacherWhereUniqueInput!]
  set: [TeacherWhereUniqueInput!]
  create: [TeacherCreateInput!]
  connect: [TeacherWhereUniqueInput!]
}

input SubjectUpdateArgs {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateInput!
}

input SubjectCreateInput {
  title: String
  teacherRef: TeacherRelateToManyForCreateInput
}

input TeacherRelateToManyForCreateInput {
  create: [TeacherCreateInput!]
  connect: [TeacherWhereUniqueInput!]
}

type File {
  id: ID!
  filename: String
  description: String
  file: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  filename: StringFilter
  description: StringFilter
}

input FileOrderByInput {
  id: OrderDirection
  filename: OrderDirection
  description: OrderDirection
}

input FileUpdateInput {
  filename: String
  description: String
  file: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  filename: String
  description: String
  file: FileFieldInput
}

type Banner {
  id: ID!
  title: String
  href: String
  file: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input BannerWhereUniqueInput {
  id: ID
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  id: IDFilter
  title: StringFilter
  href: StringFilter
}

input BannerOrderByInput {
  id: OrderDirection
  title: OrderDirection
  href: OrderDirection
}

input BannerUpdateInput {
  title: String
  href: String
  file: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

input BannerUpdateArgs {
  where: BannerWhereUniqueInput!
  data: BannerUpdateInput!
}

input BannerCreateInput {
  title: String
  href: String
  file: ImageFieldInput
}

type Album {
  id: ID!
  title: String
  description: String
  photoRef(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photoRefCount(where: PhotoWhereInput! = {}): Int
}

input AlbumWhereUniqueInput {
  id: ID
}

input AlbumWhereInput {
  AND: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  photoRef: PhotoManyRelationFilter
}

input PhotoManyRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input AlbumOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input AlbumUpdateInput {
  title: String
  description: String
  photoRef: PhotoRelateToManyForUpdateInput
}

input PhotoRelateToManyForUpdateInput {
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

input AlbumUpdateArgs {
  where: AlbumWhereUniqueInput!
  data: AlbumUpdateInput!
}

input AlbumCreateInput {
  title: String
  description: String
  photoRef: PhotoRelateToManyForCreateInput
}

input PhotoRelateToManyForCreateInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

type Photo {
  id: ID!
  title: String
  description: String
  photo: ImageFieldOutput
  albumRef(
    where: AlbumWhereInput! = {}
    orderBy: [AlbumOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Album!]
  albumRefCount(where: AlbumWhereInput! = {}): Int
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  albumRef: AlbumManyRelationFilter
}

input AlbumManyRelationFilter {
  every: AlbumWhereInput
  some: AlbumWhereInput
  none: AlbumWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input PhotoUpdateInput {
  title: String
  description: String
  photo: ImageFieldInput
  albumRef: AlbumRelateToManyForUpdateInput
}

input AlbumRelateToManyForUpdateInput {
  disconnect: [AlbumWhereUniqueInput!]
  set: [AlbumWhereUniqueInput!]
  create: [AlbumCreateInput!]
  connect: [AlbumWhereUniqueInput!]
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  title: String
  description: String
  photo: ImageFieldInput
  albumRef: AlbumRelateToManyForCreateInput
}

input AlbumRelateToManyForCreateInput {
  create: [AlbumCreateInput!]
  connect: [AlbumWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createSchool(data: SchoolCreateInput!): School
  createSchools(data: [SchoolCreateInput!]!): [School]
  updateSchool(where: SchoolWhereUniqueInput!, data: SchoolUpdateInput!): School
  updateSchools(data: [SchoolUpdateArgs!]!): [School]
  deleteSchool(where: SchoolWhereUniqueInput!): School
  deleteSchools(where: [SchoolWhereUniqueInput!]!): [School]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTeacher(data: TeacherCreateInput!): Teacher
  createTeachers(data: [TeacherCreateInput!]!): [Teacher]
  updateTeacher(
    where: TeacherWhereUniqueInput!
    data: TeacherUpdateInput!
  ): Teacher
  updateTeachers(data: [TeacherUpdateArgs!]!): [Teacher]
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteTeachers(where: [TeacherWhereUniqueInput!]!): [Teacher]
  createMainMenuItem(data: MainMenuItemCreateInput!): MainMenuItem
  createMainMenuItems(data: [MainMenuItemCreateInput!]!): [MainMenuItem]
  updateMainMenuItem(
    where: MainMenuItemWhereUniqueInput!
    data: MainMenuItemUpdateInput!
  ): MainMenuItem
  updateMainMenuItems(data: [MainMenuItemUpdateArgs!]!): [MainMenuItem]
  deleteMainMenuItem(where: MainMenuItemWhereUniqueInput!): MainMenuItem
  deleteMainMenuItems(where: [MainMenuItemWhereUniqueInput!]!): [MainMenuItem]
  createMenuItem(data: MenuItemCreateInput!): MenuItem
  createMenuItems(data: [MenuItemCreateInput!]!): [MenuItem]
  updateMenuItem(
    where: MenuItemWhereUniqueInput!
    data: MenuItemUpdateInput!
  ): MenuItem
  updateMenuItems(data: [MenuItemUpdateArgs!]!): [MenuItem]
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteMenuItems(where: [MenuItemWhereUniqueInput!]!): [MenuItem]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createBlock(data: BlockCreateInput!): Block
  createBlocks(data: [BlockCreateInput!]!): [Block]
  updateBlock(where: BlockWhereUniqueInput!, data: BlockUpdateInput!): Block
  updateBlocks(data: [BlockUpdateArgs!]!): [Block]
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteBlocks(where: [BlockWhereUniqueInput!]!): [Block]
  createNewsPost(data: NewsPostCreateInput!): NewsPost
  createNewsPosts(data: [NewsPostCreateInput!]!): [NewsPost]
  updateNewsPost(
    where: NewsPostWhereUniqueInput!
    data: NewsPostUpdateInput!
  ): NewsPost
  updateNewsPosts(data: [NewsPostUpdateArgs!]!): [NewsPost]
  deleteNewsPost(where: NewsPostWhereUniqueInput!): NewsPost
  deleteNewsPosts(where: [NewsPostWhereUniqueInput!]!): [NewsPost]
  createSubject(data: SubjectCreateInput!): Subject
  createSubjects(data: [SubjectCreateInput!]!): [Subject]
  updateSubject(
    where: SubjectWhereUniqueInput!
    data: SubjectUpdateInput!
  ): Subject
  updateSubjects(data: [SubjectUpdateArgs!]!): [Subject]
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteSubjects(where: [SubjectWhereUniqueInput!]!): [Subject]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createBanner(data: BannerCreateInput!): Banner
  createBanners(data: [BannerCreateInput!]!): [Banner]
  updateBanner(where: BannerWhereUniqueInput!, data: BannerUpdateInput!): Banner
  updateBanners(data: [BannerUpdateArgs!]!): [Banner]
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteBanners(where: [BannerWhereUniqueInput!]!): [Banner]
  createAlbum(data: AlbumCreateInput!): Album
  createAlbums(data: [AlbumCreateInput!]!): [Album]
  updateAlbum(where: AlbumWhereUniqueInput!, data: AlbumUpdateInput!): Album
  updateAlbums(data: [AlbumUpdateArgs!]!): [Album]
  deleteAlbum(where: AlbumWhereUniqueInput!): Album
  deleteAlbums(where: [AlbumWhereUniqueInput!]!): [Album]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  password: String
  email: String
  isAdmin: Boolean
}

type Query {
  schools(
    where: SchoolWhereInput! = {}
    orderBy: [SchoolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [School!]
  school(where: SchoolWhereUniqueInput!): School
  schoolsCount(where: SchoolWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  teachers(
    where: TeacherWhereInput! = {}
    orderBy: [TeacherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Teacher!]
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachersCount(where: TeacherWhereInput! = {}): Int
  mainMenuItems(
    where: MainMenuItemWhereInput! = {}
    orderBy: [MainMenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MainMenuItem!]
  mainMenuItem(where: MainMenuItemWhereUniqueInput!): MainMenuItem
  mainMenuItemsCount(where: MainMenuItemWhereInput! = {}): Int
  menuItems(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItemsCount(where: MenuItemWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  blocks(
    where: BlockWhereInput! = {}
    orderBy: [BlockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Block!]
  block(where: BlockWhereUniqueInput!): Block
  blocksCount(where: BlockWhereInput! = {}): Int
  newsPosts(
    where: NewsPostWhereInput! = {}
    orderBy: [NewsPostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NewsPost!]
  newsPost(where: NewsPostWhereUniqueInput!): NewsPost
  newsPostsCount(where: NewsPostWhereInput! = {}): Int
  subjects(
    where: SubjectWhereInput! = {}
    orderBy: [SubjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Subject!]
  subject(where: SubjectWhereUniqueInput!): Subject
  subjectsCount(where: SubjectWhereInput! = {}): Int
  files(
    where: FileWhereInput! = {}
    orderBy: [FileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  banners(
    where: BannerWhereInput! = {}
    orderBy: [BannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Banner!]
  banner(where: BannerWhereUniqueInput!): Banner
  bannersCount(where: BannerWhereInput! = {}): Int
  albums(
    where: AlbumWhereInput! = {}
    orderBy: [AlbumOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Album!]
  album(where: AlbumWhereUniqueInput!): Album
  albumsCount(where: AlbumWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
